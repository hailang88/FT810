; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\retarget.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\retarget.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M051Series\Include -I..\..\..\Library\StdDriver\inc -IH:\Nuvoton\USART\KEIL\RTE\_Template -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.0.9\Device\M051\Driver -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.0.9\Device\M051\Include -D__MICROLIB -D__UVISION_VERSION=522 -D_RTE_ --omf_browse=.\obj\retarget.crf RTE\Device\M0516LDE\retarget.c]
                          THUMB

                          AREA ||i.GetChar||, CODE, READONLY, ALIGN=2

                  GetChar PROC
;;;256     */
;;;257    char GetChar(void)
000000  4803              LDR      r0,|L1.16|
                  |L1.2|
;;;258    {
;;;259    #ifdef DEBUG_ENABLE_SEMIHOST
;;;260    # if defined (__CC_ARM)
;;;261        int nRet;
;;;262        while(SH_DoCommand(0x101, 0, &nRet) != 0)
;;;263        {
;;;264            if(nRet != 0)
;;;265            {
;;;266                SH_DoCommand(0x07, 0, &nRet);
;;;267                return (char)nRet;
;;;268            }
;;;269        }
;;;270    # else
;;;271        int nRet;
;;;272        while(SH_DoCommand(0x7, 0, &nRet) != 0)
;;;273        {
;;;274            if(nRet != 0)
;;;275                return (char)nRet;
;;;276        }
;;;277    # endif
;;;278        return (0);
;;;279    #else
;;;280    
;;;281        while(1)
;;;282        {
;;;283            if((DEBUG_PORT->FSR & UART_FSR_RX_EMPTY_Msk) == 0)
000002  6981              LDR      r1,[r0,#0x18]
000004  0449              LSLS     r1,r1,#17
000006  d4fc              BMI      |L1.2|
;;;284            {
;;;285                return (DEBUG_PORT->DATA);
000008  6800              LDR      r0,[r0,#0]
00000a  b2c0              UXTB     r0,r0
;;;286            }
;;;287        }
;;;288    
;;;289    #endif
;;;290    }
00000c  4770              BX       lr
;;;291    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40050000

                          AREA ||i.IsDebugFifoEmpty||, CODE, READONLY, ALIGN=2

                  IsDebugFifoEmpty PROC
;;;317    
;;;318    int IsDebugFifoEmpty(void)
000000  4802              LDR      r0,|L2.12|
;;;319    {
;;;320        return ((DEBUG_PORT->FSR & UART_FSR_TE_FLAG_Msk) != 0);
000002  6980              LDR      r0,[r0,#0x18]
000004  00c0              LSLS     r0,r0,#3
000006  0fc0              LSRS     r0,r0,#31
;;;321    }
000008  4770              BX       lr
;;;322    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x40050000

                          AREA ||i.SendChar||, CODE, READONLY, ALIGN=1

                  SendChar PROC
;;;220     */
;;;221    void SendChar(int ch)
000000  b500              PUSH     {lr}
;;;222    {
;;;223    #if defined(DEBUG_ENABLE_SEMIHOST)
;;;224        g_buf[g_buf_len++] = ch;
;;;225        g_buf[g_buf_len] = '\0';
;;;226        if(g_buf_len + 1 >= sizeof(g_buf) || ch == '\n' || ch == '\0')
;;;227        {
;;;228            /* Send the char */
;;;229            if(SH_DoCommand(0x04, (int)g_buf, NULL) != 0)
;;;230            {
;;;231                g_buf_len = 0;
;;;232                return;
;;;233            }
;;;234            else
;;;235            {
;;;236                int i;
;;;237    
;;;238                for(i = 0; i < g_buf_len; i++)
;;;239                    SendChar_ToUART(g_buf[i]);
;;;240                g_buf_len = 0;
;;;241            }
;;;242        }
;;;243    #else
;;;244        SendChar_ToUART(ch);
000002  f7fffffe          BL       SendChar_ToUART
;;;245    #endif
;;;246    }
000006  bd00              POP      {pc}
;;;247    
                          ENDP


                          AREA ||i.SendChar_ToUART||, CODE, READONLY, ALIGN=2

                  SendChar_ToUART PROC
;;;199    
;;;200    void SendChar_ToUART(int ch)
000000  4906              LDR      r1,|L4.28|
                  |L4.2|
;;;201    {
;;;202    
;;;203        while(DEBUG_PORT->FSR & UART_FSR_TX_FULL_Msk);
000002  698a              LDR      r2,[r1,#0x18]
000004  0212              LSLS     r2,r2,#8
000006  d4fc              BMI      |L4.2|
;;;204        DEBUG_PORT->DATA = ch;
000008  6008              STR      r0,[r1,#0]
;;;205        if(ch == '\n')
00000a  280a              CMP      r0,#0xa
00000c  d104              BNE      |L4.24|
                  |L4.14|
;;;206        {
;;;207            while(DEBUG_PORT->FSR & UART_FSR_TX_FULL_Msk);
00000e  6988              LDR      r0,[r1,#0x18]
000010  0200              LSLS     r0,r0,#8
000012  d4fc              BMI      |L4.14|
;;;208            DEBUG_PORT->DATA = '\r';
000014  200d              MOVS     r0,#0xd
000016  6008              STR      r0,[r1,#0]
                  |L4.24|
;;;209        }
;;;210    }
000018  4770              BX       lr
;;;211    
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      0x40050000

                          AREA ||i._ttywrch||, CODE, READONLY, ALIGN=1

                  _ttywrch PROC
;;;332    
;;;333    void _ttywrch(int ch)
000000  b500              PUSH     {lr}
000002  f7fffffe          BL       SendChar_ToUART
;;;334    {
;;;335        SendChar(ch);
;;;336        return;
;;;337    }
000006  bd00              POP      {pc}
;;;338    
                          ENDP


                          AREA ||i.ferror||, CODE, READONLY, ALIGN=1

                  ferror PROC
;;;395    
;;;396    int ferror(FILE *stream)
000000  2000              MOVS     r0,#0
;;;397    {
;;;398        return EOF;
000002  43c0              MVNS     r0,r0
;;;399    }
000004  4770              BX       lr
;;;400    
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

                  fgetc PROC
;;;375    
;;;376    int fgetc(FILE *stream)
000000  b500              PUSH     {lr}
;;;377    {
;;;378        return (GetChar());
000002  f7fffffe          BL       GetChar
;;;379    }
000006  bd00              POP      {pc}
;;;380    
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;357    
;;;358    int fputc(int ch, FILE *stream)
000000  b500              PUSH     {lr}
;;;359    {
000002  4603              MOV      r3,r0
000004  f7fffffe          BL       SendChar_ToUART
;;;360        SendChar(ch);
;;;361        return ch;
000008  4618              MOV      r0,r3
;;;362    }
00000a  bd00              POP      {pc}
;;;363    
                          ENDP


                          AREA ||i.kbhit||, CODE, READONLY, ALIGN=2

                  kbhit PROC
;;;302    
;;;303    int kbhit(void)
000000  4802              LDR      r0,|L9.12|
;;;304    {
;;;305        return !((DEBUG_PORT->FSR & UART_FSR_RX_EMPTY_Msk) == 0);
000002  6980              LDR      r0,[r0,#0x18]
000004  0440              LSLS     r0,r0,#17
000006  0fc0              LSRS     r0,r0,#31
;;;306    }
000008  4770              BX       lr
;;;307    /**
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      0x40050000

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000

                          AREA ||area_number.13||, DATA, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.data||
                  __stdin
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "RTE\\Device\\M0516LDE\\retarget.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_871f546e____REV16|
#line 441 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_retarget_c_871f546e____REV16| PROC
#line 442

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_871f546e____REVSH|
#line 456
|__asm___10_retarget_c_871f546e____REVSH| PROC
#line 457

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
