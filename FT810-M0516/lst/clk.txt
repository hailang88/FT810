; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\clk.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\clk.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M051Series\Include -I..\..\..\Library\StdDriver\inc -IH:\Nuvoton\USART\KEIL\RTE\_Template -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.0.9\Device\M051\Driver -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.0.9\Device\M051\Include -D__MICROLIB -D__UVISION_VERSION=522 -D_RTE_ --omf_browse=.\obj\clk.crf C:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.0.9\Device\M051\Driver\clk.c]
                          THUMB

                          AREA ||i.CLK_DisableCKO||, CODE, READONLY, ALIGN=2

                  CLK_DisableCKO PROC
;;;30       */
;;;31     void CLK_DisableCKO(void)
000000  b500              PUSH     {lr}
;;;32     {
;;;33         /* Disable CKO clock source */
;;;34         CLK_DisableModuleClock(FDIV_MODULE);
000002  4802              LDR      r0,|L1.12|
000004  f7fffffe          BL       CLK_DisableModuleClock
;;;35     }
000008  bd00              POP      {pc}
;;;36     
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x76200006

                          AREA ||i.CLK_DisableModuleClock||, CODE, READONLY, ALIGN=2

                  CLK_DisableModuleClock PROC
;;;445      */
;;;446    void CLK_DisableModuleClock(uint32_t u32ModuleIdx)
000000  0f81              LSRS     r1,r0,#30
;;;447    {
;;;448        *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK + (MODULE_APBCLK(u32ModuleIdx) * 4))  &= ~(1 << MODULE_IP_EN_Pos(u32ModuleIdx));
000002  008a              LSLS     r2,r1,#2
000004  4904              LDR      r1,|L2.24|
000006  1851              ADDS     r1,r2,r1
000008  684a              LDR      r2,[r1,#4]
00000a  06c3              LSLS     r3,r0,#27
00000c  0edb              LSRS     r3,r3,#27
00000e  2001              MOVS     r0,#1
000010  4098              LSLS     r0,r0,r3
000012  4382              BICS     r2,r2,r0
000014  604a              STR      r2,[r1,#4]
;;;449    }
000016  4770              BX       lr
;;;450    
                          ENDP

                  |L2.24|
                          DCD      0x50000200

                          AREA ||i.CLK_DisablePLL||, CODE, READONLY, ALIGN=2

                  CLK_DisablePLL PROC
;;;582      */
;;;583    void CLK_DisablePLL(void)
000000  4802              LDR      r0,|L3.12|
;;;584    {
;;;585        CLK->PLLCON |= CLK_PLLCON_PD_Msk;
000002  6a01              LDR      r1,[r0,#0x20]
000004  01c2              LSLS     r2,r0,#7
000006  4311              ORRS     r1,r1,r2
000008  6201              STR      r1,[r0,#0x20]
;;;586    }
00000a  4770              BX       lr
;;;587    
                          ENDP

                  |L3.12|
                          DCD      0x50000200

                          AREA ||i.CLK_DisableSysTick||, CODE, READONLY, ALIGN=2

                  CLK_DisableSysTick PROC
;;;652      */
;;;653    void CLK_DisableSysTick(void) 
000000  4901              LDR      r1,|L4.8|
;;;654    {    
;;;655        /* Set System Tick counter disabled */
;;;656    	SysTick->CTRL = 0;    
000002  2000              MOVS     r0,#0
000004  6108              STR      r0,[r1,#0x10]
;;;657    }
000006  4770              BX       lr
;;;658    
                          ENDP

                  |L4.8|
                          DCD      0xe000e000

                          AREA ||i.CLK_DisableXtalRC||, CODE, READONLY, ALIGN=2

                  CLK_DisableXtalRC PROC
;;;376      */
;;;377    void CLK_DisableXtalRC(uint32_t u32ClkMask)
000000  4902              LDR      r1,|L5.12|
;;;378    {
;;;379        CLK->PWRCON &= ~u32ClkMask;
000002  680a              LDR      r2,[r1,#0]
000004  4382              BICS     r2,r2,r0
000006  600a              STR      r2,[r1,#0]
;;;380    }
000008  4770              BX       lr
;;;381    
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      0x50000200

                          AREA ||i.CLK_EnableCKO||, CODE, READONLY, ALIGN=2

                  CLK_EnableCKO PROC
;;;54       */
;;;55     void CLK_EnableCKO(uint32_t u32ClkSrc, uint32_t u32ClkDiv, uint32_t u32ClkDivBy1En)
000000  b530              PUSH     {r4,r5,lr}
;;;56     {
000002  4604              MOV      r4,r0
;;;57         /* CKO = clock source / 2^(u32ClkDiv + 1) */
;;;58         CLK->FRQDIV = CLK_FRQDIV_DIVIDER_EN_Msk | u32ClkDiv | u32ClkDivBy1En << CLK_FRQDIV_DIVIDER1_Pos;
000004  0152              LSLS     r2,r2,#5
000006  430a              ORRS     r2,r2,r1
000008  2010              MOVS     r0,#0x10
00000a  4302              ORRS     r2,r2,r0
00000c  4805              LDR      r0,|L6.36|
00000e  6242              STR      r2,[r0,#0x24]
;;;59     
;;;60         /* Enable CKO clock source */
;;;61         CLK_EnableModuleClock(FDIV_MODULE);
000010  4d05              LDR      r5,|L6.40|
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       CLK_EnableModuleClock
;;;62     
;;;63         /* Select CKO clock source */
;;;64         CLK_SetModuleClock(FDIV_MODULE, u32ClkSrc, 0);
000018  2200              MOVS     r2,#0
00001a  4621              MOV      r1,r4
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       CLK_SetModuleClock
;;;65     }
000022  bd30              POP      {r4,r5,pc}
;;;66     
                          ENDP

                  |L6.36|
                          DCD      0x50000200
                  |L6.40|
                          DCD      0x76200006

                          AREA ||i.CLK_EnableModuleClock||, CODE, READONLY, ALIGN=2

                  CLK_EnableModuleClock PROC
;;;411      */
;;;412    void CLK_EnableModuleClock(uint32_t u32ModuleIdx)
000000  0f81              LSRS     r1,r0,#30
;;;413    {
;;;414        *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK + (MODULE_APBCLK(u32ModuleIdx) * 4))  |= 1 << MODULE_IP_EN_Pos(u32ModuleIdx);
000002  008a              LSLS     r2,r1,#2
000004  4904              LDR      r1,|L7.24|
000006  1851              ADDS     r1,r2,r1
000008  684a              LDR      r2,[r1,#4]
00000a  06c3              LSLS     r3,r0,#27
00000c  0edb              LSRS     r3,r3,#27
00000e  2001              MOVS     r0,#1
000010  4098              LSLS     r0,r0,r3
000012  4302              ORRS     r2,r2,r0
000014  604a              STR      r2,[r1,#4]
;;;415    }
000016  4770              BX       lr
;;;416    
                          ENDP

                  |L7.24|
                          DCD      0x50000200

                          AREA ||i.CLK_EnablePLL||, CODE, READONLY, ALIGN=2

                  CLK_EnablePLL PROC
;;;461      */
;;;462    uint32_t CLK_EnablePLL(uint32_t u32PllClkSrc, uint32_t u32PllFreq)
000000  b5f0              PUSH     {r4-r7,lr}
;;;463    {
000002  0007              MOVS     r7,r0
000004  460c              MOV      r4,r1
;;;464        uint32_t u32PllSrcClk, u32NR, u32NF, u32NO, u32CLK_SRC;
;;;465        uint32_t u32Tmp, u32Tmp2, u32Tmp3, u32Min, u32MinNF, u32MinNR;
;;;466    
;;;467        /* Disable PLL first to avoid unstable when setting PLL. */
;;;468        CLK->PLLCON = CLK_PLLCON_PD_Msk;
000006  4856              LDR      r0,|L8.352|
000008  b085              SUB      sp,sp,#0x14           ;463
00000a  4954              LDR      r1,|L8.348|
00000c  6201              STR      r1,[r0,#0x20]
;;;469    
;;;470        /* PLL source clock is from HXT */    
;;;471        if(u32PllClkSrc == CLK_PLLCON_PLL_SRC_HXT)
;;;472        {
;;;473            /* Enable HXT clock */
;;;474            CLK->PWRCON |= CLK_PWRCON_XTL12M_EN_Msk;
;;;475    
;;;476            /* Wait for HXT clock ready */
;;;477            CLK_WaitClockReady(CLK_CLKSTATUS_XTL12M_STB_Msk);
;;;478    
;;;479            /* Select PLL source clock from HXT */
;;;480            u32CLK_SRC = CLK_PLLCON_PLL_SRC_HXT;
;;;481            u32PllSrcClk = __HXT;
00000e  4e55              LDR      r6,|L8.356|
;;;482    
;;;483            /* u32NR start from 2 */
;;;484            u32NR = 2;
;;;485        }
;;;486        
;;;487        /* PLL source clock is from HIRC */    
;;;488        else
;;;489        {       
;;;490            /* Enable HIRC clock */
;;;491            CLK->PWRCON |= CLK_PWRCON_OSC22M_EN_Msk;
000010  6801              LDR      r1,[r0,#0]
000012  d013              BEQ      |L8.60|
000014  2204              MOVS     r2,#4
000016  4311              ORRS     r1,r1,r2
000018  6001              STR      r1,[r0,#0]
;;;492    
;;;493            /* Wait for HIRC clock ready */
;;;494            CLK_WaitClockReady(CLK_CLKSTATUS_OSC22M_STB_Msk);
00001a  2010              MOVS     r0,#0x10
00001c  f7fffffe          BL       CLK_WaitClockReady
;;;495    
;;;496            /* Select PLL source clock from HIRC */
;;;497            u32CLK_SRC = CLK_PLLCON_PLL_SRC_HIRC;
000020  2001              MOVS     r0,#1
000022  04c0              LSLS     r0,r0,#19
;;;498            u32PllSrcClk = __HIRC;
000024  9002              STR      r0,[sp,#8]
000026  4850              LDR      r0,|L8.360|
;;;499    
;;;500            /* u32NR start from 4 when FIN = 22.1184MHz to avoid calculation overflow */
;;;501            u32NR = 4;                
000028  2504              MOVS     r5,#4
00002a  9003              STR      r0,[sp,#0xc]
                  |L8.44|
;;;502        }
;;;503    
;;;504        /* Select "NO" according to request frequency */
;;;505        if((u32PllFreq <= FREQ_200MHZ) && (u32PllFreq > FREQ_100MHZ))
00002c  484f              LDR      r0,|L8.364|
00002e  4950              LDR      r1,|L8.368|
000030  1820              ADDS     r0,r4,r0
000032  4288              CMP      r0,r1
000034  d80d              BHI      |L8.82|
;;;506        {
;;;507            u32NO = 0;
000036  2000              MOVS     r0,#0
000038  9004              STR      r0,[sp,#0x10]
00003a  e01c              B        |L8.118|
                  |L8.60|
00003c  2201              MOVS     r2,#1                 ;474
00003e  4311              ORRS     r1,r1,r2              ;474
000040  6001              STR      r1,[r0,#0]            ;474
000042  4610              MOV      r0,r2                 ;477
000044  f7fffffe          BL       CLK_WaitClockReady
000048  2000              MOVS     r0,#0                 ;480
00004a  2502              MOVS     r5,#2                 ;484
00004c  9603              STR      r6,[sp,#0xc]          ;484
00004e  9002              STR      r0,[sp,#8]            ;484
000050  e7ec              B        |L8.44|
                  |L8.82|
;;;508        }
;;;509        else if((u32PllFreq <= FREQ_100MHZ) && (u32PllFreq > FREQ_50MHZ))
000052  4848              LDR      r0,|L8.372|
000054  4948              LDR      r1,|L8.376|
000056  1820              ADDS     r0,r4,r0
000058  4288              CMP      r0,r1
00005a  d803              BHI      |L8.100|
;;;510        {
;;;511            u32NO = 1;
00005c  2001              MOVS     r0,#1
;;;512            u32PllFreq = u32PllFreq << 1;
00005e  0064              LSLS     r4,r4,#1
000060  9004              STR      r0,[sp,#0x10]
000062  e008              B        |L8.118|
                  |L8.100|
;;;513        }
;;;514        else if((u32PllFreq <= FREQ_50MHZ) && (u32PllFreq >= FREQ_25MHZ))
000064  4845              LDR      r0,|L8.380|
000066  4945              LDR      r1,|L8.380|
000068  1820              ADDS     r0,r4,r0
00006a  4249              RSBS     r1,r1,#0
00006c  4288              CMP      r0,r1
00006e  d849              BHI      |L8.260|
;;;515        {
;;;516            u32NO = 3;
000070  2003              MOVS     r0,#3
;;;517            u32PllFreq = u32PllFreq << 2;
000072  00a4              LSLS     r4,r4,#2
000074  9004              STR      r0,[sp,#0x10]
                  |L8.118|
;;;518        }
;;;519        else
;;;520        {
;;;521            /* Wrong frequency request. Just return default setting. */
;;;522            goto lexit;
;;;523        }
;;;524    
;;;525        /* Find best solution */
;;;526        u32Min = (uint32_t) - 1;
000076  2600              MOVS     r6,#0
000078  43f6              MVNS     r6,r6
;;;527        u32MinNR = 0;
00007a  2000              MOVS     r0,#0
;;;528        u32MinNF = 0;
00007c  9000              STR      r0,[sp,#0]
;;;529        for(; u32NR <= 33; u32NR++)
00007e  9001              STR      r0,[sp,#4]
000080  e021              B        |L8.198|
                  |L8.130|
;;;530        {
;;;531            u32Tmp = u32PllSrcClk / u32NR;
000082  4629              MOV      r1,r5
000084  9803              LDR      r0,[sp,#0xc]
000086  f7fffffe          BL       __aeabi_uidivmod
;;;532            if((u32Tmp > 1600000) && (u32Tmp < 15000000))
00008a  493d              LDR      r1,|L8.384|
00008c  4a3d              LDR      r2,|L8.388|
00008e  1841              ADDS     r1,r0,r1
000090  4291              CMP      r1,r2
000092  d217              BCS      |L8.196|
;;;533            {
;;;534                for(u32NF = 2; u32NF <= 513; u32NF++)
000094  2202              MOVS     r2,#2
                  |L8.150|
;;;535                {
;;;536                    u32Tmp2 = u32Tmp * u32NF;
;;;537                    if((u32Tmp2 >= 100000000) && (u32Tmp2 <= 200000000))
000096  4b35              LDR      r3,|L8.364|
000098  4601              MOV      r1,r0                 ;534
00009a  4351              MULS     r1,r2,r1              ;536
00009c  1c5b              ADDS     r3,r3,#1
00009e  18cf              ADDS     r7,r1,r3
0000a0  425b              RSBS     r3,r3,#0
0000a2  429f              CMP      r7,r3
0000a4  d80a              BHI      |L8.188|
;;;538                    {
;;;539                        u32Tmp3 = (u32Tmp2 > u32PllFreq) ? u32Tmp2 - u32PllFreq : u32PllFreq - u32Tmp2;
0000a6  42a1              CMP      r1,r4
0000a8  d901              BLS      |L8.174|
0000aa  1b0b              SUBS     r3,r1,r4
0000ac  e000              B        |L8.176|
                  |L8.174|
0000ae  1a63              SUBS     r3,r4,r1
                  |L8.176|
;;;540                        if(u32Tmp3 < u32Min)
0000b0  42b3              CMP      r3,r6
0000b2  d203              BCS      |L8.188|
;;;541                        {
;;;542                            u32Min = u32Tmp3;
0000b4  001e              MOVS     r6,r3
;;;543                            u32MinNR = u32NR;
;;;544                            u32MinNF = u32NF;
;;;545    
;;;546                            /* Break when get good results */
;;;547                            if(u32Min == 0)
0000b6  9500              STR      r5,[sp,#0]
0000b8  9201              STR      r2,[sp,#4]
0000ba  d003              BEQ      |L8.196|
                  |L8.188|
0000bc  4932              LDR      r1,|L8.392|
0000be  1c52              ADDS     r2,r2,#1              ;534
0000c0  428a              CMP      r2,r1                 ;534
0000c2  d9e8              BLS      |L8.150|
                  |L8.196|
0000c4  1c6d              ADDS     r5,r5,#1              ;534
                  |L8.198|
0000c6  2d21              CMP      r5,#0x21              ;529
0000c8  d9db              BLS      |L8.130|
;;;548                                break;
;;;549                        }
;;;550                    }
;;;551                }
;;;552            }
;;;553        }
;;;554    
;;;555        /* Enable and apply new PLL setting. */
;;;556        CLK->PLLCON = u32CLK_SRC | (u32NO << 14) | ((u32MinNR - 2) << 9) | (u32MinNF - 2);
0000ca  9804              LDR      r0,[sp,#0x10]
0000cc  9902              LDR      r1,[sp,#8]
0000ce  0380              LSLS     r0,r0,#14
0000d0  4308              ORRS     r0,r0,r1
0000d2  9900              LDR      r1,[sp,#0]
0000d4  2201              MOVS     r2,#1
0000d6  0249              LSLS     r1,r1,#9
0000d8  0292              LSLS     r2,r2,#10
0000da  1a89              SUBS     r1,r1,r2
0000dc  4308              ORRS     r0,r0,r1
0000de  9901              LDR      r1,[sp,#4]
0000e0  1e89              SUBS     r1,r1,#2
0000e2  4308              ORRS     r0,r0,r1
0000e4  491e              LDR      r1,|L8.352|
0000e6  6208              STR      r0,[r1,#0x20]
;;;557    
;;;558        /* Waiting for PLL clock stable */
;;;559        CLK_WaitClockReady(CLK_CLKSTATUS_PLL_STB_Msk);
0000e8  2004              MOVS     r0,#4
0000ea  f7fffffe          BL       CLK_WaitClockReady
;;;560    
;;;561        /* Return actual PLL output clock frequency */
;;;562        return u32PllSrcClk / ((u32NO + 1) * u32MinNR) * u32MinNF;
0000ee  9904              LDR      r1,[sp,#0x10]
0000f0  9800              LDR      r0,[sp,#0]
0000f2  1c49              ADDS     r1,r1,#1
0000f4  4341              MULS     r1,r0,r1
0000f6  9803              LDR      r0,[sp,#0xc]
0000f8  f7fffffe          BL       __aeabi_uidivmod
0000fc  9901              LDR      r1,[sp,#4]
0000fe  4348              MULS     r0,r1,r0
                  |L8.256|
;;;563    
;;;564    lexit:
;;;565    
;;;566        /* Apply default PLL setting and return */
;;;567        if(u32PllClkSrc == CLK_PLLCON_PLL_SRC_HXT)
;;;568            CLK->PLLCON = 0xC22E; /* 48MHz */
;;;569        else
;;;570            CLK->PLLCON = 0xD66F; /* 48.06498462MHz */
;;;571    
;;;572        CLK_WaitClockReady(CLK_CLKSTATUS_PLL_STB_Msk);
;;;573        return CLK_GetPLLClockFreq();
;;;574    
;;;575    }
000100  b005              ADD      sp,sp,#0x14
000102  bdf0              POP      {r4-r7,pc}
                  |L8.260|
000104  2f00              CMP      r7,#0                 ;567
000106  d00f              BEQ      |L8.296|
000108  4920              LDR      r1,|L8.396|
                  |L8.266|
00010a  4815              LDR      r0,|L8.352|
00010c  6201              STR      r1,[r0,#0x20]         ;570
00010e  2004              MOVS     r0,#4                 ;572
000110  f7fffffe          BL       CLK_WaitClockReady
000114  a01e              ADR      r0,|L8.400|
000116  6800              LDR      r0,[r0,#0]            ;572
000118  9000              STR      r0,[sp,#0]            ;572
00011a  4811              LDR      r0,|L8.352|
00011c  6a01              LDR      r1,[r0,#0x20]         ;572
00011e  1300              ASRS     r0,r0,#12             ;572
000120  4201              TST      r1,r0                 ;572
000122  d003              BEQ      |L8.300|
000124  2000              MOVS     r0,#0                 ;572
000126  e7eb              B        |L8.256|
                  |L8.296|
000128  491a              LDR      r1,|L8.404|
00012a  e7ee              B        |L8.266|
                  |L8.300|
00012c  0308              LSLS     r0,r1,#12             ;568
00012e  d500              BPL      |L8.306|
000130  4e0d              LDR      r6,|L8.360|
                  |L8.306|
000132  0388              LSLS     r0,r1,#14             ;568
000134  d501              BPL      |L8.314|
000136  4630              MOV      r0,r6                 ;568
000138  e7e2              B        |L8.256|
                  |L8.314|
00013a  0408              LSLS     r0,r1,#16
00013c  0f80              LSRS     r0,r0,#30
00013e  466a              MOV      r2,sp
000140  5c10              LDRB     r0,[r2,r0]
000142  05ca              LSLS     r2,r1,#23
000144  0489              LSLS     r1,r1,#18
000146  0ec9              LSRS     r1,r1,#27
000148  1c89              ADDS     r1,r1,#2
00014a  0dd2              LSRS     r2,r2,#23
00014c  4341              MULS     r1,r0,r1
00014e  08b0              LSRS     r0,r6,#2
000150  1c92              ADDS     r2,r2,#2
000152  4350              MULS     r0,r2,r0
000154  f7fffffe          BL       __aeabi_uidivmod
000158  0080              LSLS     r0,r0,#2
00015a  e7d1              B        |L8.256|
;;;576    
                          ENDP

                  |L8.348|
                          DCD      0x00010000
                  |L8.352|
                          DCD      0x50000200
                  |L8.356|
                          DCD      0x00b71b00
                  |L8.360|
                          DCD      0x01518000
                  |L8.364|
                          DCD      0xfa0a1eff
                  |L8.368|
                          DCD      0x05f5e0ff
                  |L8.372|
                          DCD      0xfd050f7f
                  |L8.376|
                          DCD      0x02faf07f
                  |L8.380|
                          DCD      0xfe8287c0
                  |L8.384|
                          DCD      0xffe795ff
                  |L8.388|
                          DCD      0x00cc77bf
                  |L8.392|
                          DCD      0x00000201
                  |L8.396|
                          DCD      0x0000d66f
                  |L8.400|
000190  01020204          DCB      1,2,2,4
                  |L8.404|
                          DCD      0x0000c22e

                          AREA ||i.CLK_EnableSysTick||, CODE, READONLY, ALIGN=2

                  CLK_EnableSysTick PROC
;;;625      */
;;;626    void CLK_EnableSysTick(uint32_t u32ClkSrc, uint32_t u32Count) 
000000  b570              PUSH     {r4-r6,lr}
;;;627    {
;;;628        /* Set System Tick counter disabled */
;;;629        SysTick->CTRL = 0;    
000002  4a0b              LDR      r2,|L9.48|
000004  2400              MOVS     r4,#0
000006  6114              STR      r4,[r2,#0x10]
;;;630    
;;;631        /* Set System Tick clock source */
;;;632        if( u32ClkSrc == CLK_CLKSEL0_STCLK_S_HCLK )         
000008  2804              CMP      r0,#4
00000a  d00c              BEQ      |L9.38|
;;;633            SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
;;;634        else
;;;635            CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_STCLK_S_Msk) | u32ClkSrc; 
00000c  4d09              LDR      r5,|L9.52|
00000e  692b              LDR      r3,[r5,#0x10]
000010  2638              MOVS     r6,#0x38
000012  43b3              BICS     r3,r3,r6
000014  4303              ORRS     r3,r3,r0
000016  612b              STR      r3,[r5,#0x10]
                  |L9.24|
;;;636    
;;;637        /* Set System Tick reload value */
;;;638        SysTick->LOAD = u32Count;   
000018  6151              STR      r1,[r2,#0x14]
;;;639        
;;;640        /* Clear System Tick current value and counter flag */
;;;641        SysTick->VAL = 0;           
00001a  6194              STR      r4,[r2,#0x18]
;;;642        
;;;643        /* Set System Tick interrupt enabled and counter enabled */    
;;;644        SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;       
00001c  6910              LDR      r0,[r2,#0x10]
00001e  2103              MOVS     r1,#3
000020  4308              ORRS     r0,r0,r1
000022  6110              STR      r0,[r2,#0x10]
;;;645    }
000024  bd70              POP      {r4-r6,pc}
                  |L9.38|
000026  6910              LDR      r0,[r2,#0x10]         ;633
000028  2304              MOVS     r3,#4                 ;633
00002a  4318              ORRS     r0,r0,r3              ;633
00002c  6110              STR      r0,[r2,#0x10]         ;633
00002e  e7f3              B        |L9.24|
;;;646    
                          ENDP

                  |L9.48|
                          DCD      0xe000e000
                  |L9.52|
                          DCD      0x50000200

                          AREA ||i.CLK_EnableXtalRC||, CODE, READONLY, ALIGN=2

                  CLK_EnableXtalRC PROC
;;;361      */
;;;362    void CLK_EnableXtalRC(uint32_t u32ClkMask)
000000  4902              LDR      r1,|L10.12|
;;;363    {
;;;364        CLK->PWRCON |= u32ClkMask;
000002  680a              LDR      r2,[r1,#0]
000004  4302              ORRS     r2,r2,r0
000006  600a              STR      r2,[r1,#0]
;;;365    }
000008  4770              BX       lr
;;;366    
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      0x50000200

                          AREA ||i.CLK_GetCPUFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetCPUFreq PROC
;;;150      */
;;;151    uint32_t CLK_GetCPUFreq(void)
000000  b510              PUSH     {r4,lr}
;;;152    {
;;;153        SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;154        return SystemCoreClock;
000006  4801              LDR      r0,|L11.12|
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;155    }
00000a  bd10              POP      {r4,pc}
;;;156    
                          ENDP

                  |L11.12|
                          DCD      SystemCoreClock

                          AREA ||i.CLK_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetHCLKFreq PROC
;;;125      */
;;;126    uint32_t CLK_GetHCLKFreq(void)
000000  b510              PUSH     {r4,lr}
;;;127    {
;;;128        SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;129        return SystemCoreClock;
000006  4801              LDR      r0,|L12.12|
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;130    }
00000a  bd10              POP      {r4,pc}
;;;131    
                          ENDP

                  |L12.12|
                          DCD      SystemCoreClock

                          AREA ||i.CLK_GetHXTFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetHXTFreq PROC
;;;110      */
;;;111    uint32_t CLK_GetHXTFreq(void)
000000  4802              LDR      r0,|L13.12|
;;;112    {
;;;113        if(CLK->PWRCON & CLK_PWRCON_XTL12M_EN_Msk)
000002  6800              LDR      r0,[r0,#0]
000004  07c0              LSLS     r0,r0,#31
000006  d000              BEQ      |L13.10|
;;;114            return __HXT;
000008  4801              LDR      r0,|L13.16|
                  |L13.10|
;;;115        else
;;;116            return 0;
;;;117    }
00000a  4770              BX       lr
;;;118    
                          ENDP

                  |L13.12|
                          DCD      0x50000200
                  |L13.16|
                          DCD      0x00b71b00

                          AREA ||i.CLK_GetPCLKFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetPCLKFreq PROC
;;;137      */
;;;138    uint32_t CLK_GetPCLKFreq(void)
000000  b510              PUSH     {r4,lr}
;;;139    {
;;;140        SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;141        return SystemCoreClock;
000006  4801              LDR      r0,|L14.12|
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;142    }
00000a  bd10              POP      {r4,pc}
;;;143    
                          ENDP

                  |L14.12|
                          DCD      SystemCoreClock

                          AREA ||i.CLK_Idle||, CODE, READONLY, ALIGN=2

                  CLK_Idle PROC
;;;92       */
;;;93     void CLK_Idle(void)
000000  4805              LDR      r0,|L15.24|
;;;94     {
;;;95         /* Set the processor uses sleep as its low power mode */    
;;;96         SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
000002  6901              LDR      r1,[r0,#0x10]
000004  2204              MOVS     r2,#4
000006  4391              BICS     r1,r1,r2
000008  6101              STR      r1,[r0,#0x10]
;;;97         
;;;98         /* Set chip in idle mode because of WFI command */    
;;;99         CLK->PWRCON &= ~CLK_PWRCON_PWR_DOWN_EN_Msk;
00000a  4804              LDR      r0,|L15.28|
00000c  6801              LDR      r1,[r0,#0]
00000e  2280              MOVS     r2,#0x80
000010  4391              BICS     r1,r1,r2
000012  6001              STR      r1,[r0,#0]
;;;100        
;;;101        /* Chip enter idle mode after CPU run WFI instruction */    
;;;102        __WFI();
000014  bf30              WFI      
;;;103    }
000016  4770              BX       lr
;;;104    
                          ENDP

                  |L15.24|
                          DCD      0xe000ed00
                  |L15.28|
                          DCD      0x50000200

                          AREA ||i.CLK_PowerDown||, CODE, READONLY, ALIGN=2

                  CLK_PowerDown PROC
;;;73       */
;;;74     void CLK_PowerDown(void)
000000  4806              LDR      r0,|L16.28|
;;;75     {
;;;76         /* Set the processor uses deep sleep as its low power mode */    
;;;77         SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000002  6901              LDR      r1,[r0,#0x10]
000004  2204              MOVS     r2,#4
000006  4311              ORRS     r1,r1,r2
000008  6101              STR      r1,[r0,#0x10]
;;;78         
;;;79         /* Set system Power-down enabled and Power-down entry condition */    
;;;80         CLK->PWRCON |= (CLK_PWRCON_PWR_DOWN_EN_Msk | CLK_PWRCON_PD_WAIT_CPU_Msk);
00000a  4805              LDR      r0,|L16.32|
00000c  6801              LDR      r1,[r0,#0]
00000e  22ff              MOVS     r2,#0xff
000010  3281              ADDS     r2,r2,#0x81
000012  4311              ORRS     r1,r1,r2
000014  6001              STR      r1,[r0,#0]
;;;81         
;;;82         /* Chip enter Power-down mode after CPU run WFI instruction */    
;;;83         __WFI();
000016  bf30              WFI      
;;;84     }
000018  4770              BX       lr
;;;85     
                          ENDP

00001a  0000              DCW      0x0000
                  |L16.28|
                          DCD      0xe000ed00
                  |L16.32|
                          DCD      0x50000200

                          AREA ||i.CLK_SetCoreClock||, CODE, READONLY, ALIGN=2

                  CLK_SetCoreClock PROC
;;;164      */
;;;165    uint32_t CLK_SetCoreClock(uint32_t u32Hclk)
000000  b5f8              PUSH     {r3-r7,lr}
;;;166    {
;;;167        uint32_t u32HIRCSTB;
;;;168    
;;;169        /* Read HIRC clock source stable flag */    
;;;170        u32HIRCSTB = CLK->CLKSTATUS & CLK_CLKSTATUS_OSC22M_STB_Msk;        
000002  4c1b              LDR      r4,|L17.112|
000004  4605              MOV      r5,r0                 ;166
000006  68e6              LDR      r6,[r4,#0xc]
000008  2010              MOVS     r0,#0x10
00000a  4006              ANDS     r6,r6,r0
;;;171        
;;;172        /* The range of u32Hclk is 25 MHz ~ 50 MHz */    
;;;173        if(u32Hclk > FREQ_50MHZ)
00000c  4819              LDR      r0,|L17.116|
00000e  4285              CMP      r5,r0
000010  d802              BHI      |L17.24|
;;;174            u32Hclk = FREQ_50MHZ;
;;;175        else if(u32Hclk < FREQ_25MHZ)
000012  1040              ASRS     r0,r0,#1
000014  4285              CMP      r5,r0
000016  d200              BCS      |L17.26|
                  |L17.24|
;;;176            u32Hclk = FREQ_25MHZ;
000018  4605              MOV      r5,r0
                  |L17.26|
;;;177    
;;;178        /* Switch HCLK clock source to HIRC clock for safe */
;;;179        CLK->PWRCON |= CLK_PWRCON_OSC22M_EN_Msk;
00001a  6820              LDR      r0,[r4,#0]
00001c  2704              MOVS     r7,#4
00001e  4338              ORRS     r0,r0,r7
000020  6020              STR      r0,[r4,#0]
;;;180        CLK_WaitClockReady(CLK_CLKSTATUS_OSC22M_STB_Msk);  
000022  2010              MOVS     r0,#0x10
000024  f7fffffe          BL       CLK_WaitClockReady
;;;181        CLK->CLKSEL0 |= CLK_CLKSEL0_HCLK_S_HIRC;
000028  6920              LDR      r0,[r4,#0x10]
00002a  2107              MOVS     r1,#7
00002c  4308              ORRS     r0,r0,r1
00002e  6120              STR      r0,[r4,#0x10]
;;;182        CLK->CLKDIV &= (~CLK_CLKDIV_HCLK_N_Msk);    
000030  69a0              LDR      r0,[r4,#0x18]
000032  0900              LSRS     r0,r0,#4
000034  0100              LSLS     r0,r0,#4
000036  61a0              STR      r0,[r4,#0x18]
;;;183        
;;;184        /* Configure PLL setting if HXT clock is enabled */    
;;;185        if(CLK->PWRCON & CLK_PWRCON_XTL12M_EN_Msk)
000038  6820              LDR      r0,[r4,#0]
;;;186            u32Hclk = CLK_EnablePLL(CLK_PLLCON_PLL_SRC_HXT, u32Hclk);
;;;187    
;;;188        /* Configure PLL setting if HXT clock is not enabled */    
;;;189        else
;;;190        {
;;;191            u32Hclk = CLK_EnablePLL(CLK_PLLCON_PLL_SRC_HIRC, u32Hclk);
00003a  4629              MOV      r1,r5
00003c  07c0              LSLS     r0,r0,#31             ;185
00003e  d004              BEQ      |L17.74|
000040  2000              MOVS     r0,#0                 ;186
000042  f7fffffe          BL       CLK_EnablePLL
000046  4605              MOV      r5,r0                 ;186
000048  e007              B        |L17.90|
                  |L17.74|
00004a  2001              MOVS     r0,#1
00004c  04c0              LSLS     r0,r0,#19
00004e  f7fffffe          BL       CLK_EnablePLL
;;;192            
;;;193            /* Read HIRC clock source stable flag */    
;;;194            u32HIRCSTB = CLK->CLKSTATUS & CLK_CLKSTATUS_OSC22M_STB_Msk;            
000052  68e6              LDR      r6,[r4,#0xc]
000054  4605              MOV      r5,r0                 ;191
000056  2010              MOVS     r0,#0x10
000058  4006              ANDS     r6,r6,r0
                  |L17.90|
;;;195        }
;;;196    
;;;197        /* Select HCLK clock source to PLL */    
;;;198        CLK_SetHCLK(CLK_CLKSEL0_HCLK_S_PLL, CLK_CLKDIV_HCLK(1));
00005a  2100              MOVS     r1,#0
00005c  2002              MOVS     r0,#2
00005e  f7fffffe          BL       CLK_SetHCLK
;;;199    
;;;200        /* Disable HIRC if HIRC is disabled before setting core clock */
;;;201        if( u32HIRCSTB == 0 )
000062  2e00              CMP      r6,#0
000064  d102              BNE      |L17.108|
;;;202            CLK->PWRCON &= ~CLK_PWRCON_OSC22M_EN_Msk;      
000066  6820              LDR      r0,[r4,#0]
000068  43b8              BICS     r0,r0,r7
00006a  6020              STR      r0,[r4,#0]
                  |L17.108|
;;;203        
;;;204        return u32Hclk;
00006c  4628              MOV      r0,r5
;;;205    }
00006e  bdf8              POP      {r3-r7,pc}
;;;206    
                          ENDP

                  |L17.112|
                          DCD      0x50000200
                  |L17.116|
                          DCD      0x02faf080

                          AREA ||i.CLK_SetHCLK||, CODE, READONLY, ALIGN=2

                  CLK_SetHCLK PROC
;;;219      */
;;;220    void CLK_SetHCLK(uint32_t u32ClkSrc, uint32_t u32ClkDiv)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;221    {
;;;222        uint32_t u32HIRCSTB;
;;;223        
;;;224        /* Read HIRC clock source stable flag */    
;;;225        u32HIRCSTB = CLK->CLKSTATUS & CLK_CLKSTATUS_OSC22M_STB_Msk;
000002  4c11              LDR      r4,|L18.72|
000004  b081              SUB      sp,sp,#4              ;221
000006  68e5              LDR      r5,[r4,#0xc]
000008  460f              MOV      r7,r1                 ;221
00000a  2610              MOVS     r6,#0x10
;;;226        
;;;227        /* Switch to HIRC for Safe. Avoid HCLK too high when applying new divider. */
;;;228        CLK->PWRCON |= CLK_CLKSTATUS_OSC22M_STB_Msk;
00000c  6820              LDR      r0,[r4,#0]
00000e  4035              ANDS     r5,r5,r6              ;225
000010  4330              ORRS     r0,r0,r6
000012  6020              STR      r0,[r4,#0]
;;;229        CLK_WaitClockReady(CLK_CLKSTATUS_OSC22M_STB_Msk);  
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       CLK_WaitClockReady
;;;230        CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLK_S_Msk)) | CLK_CLKSEL0_HCLK_S_HIRC;
00001a  6920              LDR      r0,[r4,#0x10]
00001c  2107              MOVS     r1,#7
00001e  4308              ORRS     r0,r0,r1
000020  6120              STR      r0,[r4,#0x10]
;;;231          
;;;232        /* Apply new Divider */
;;;233        CLK->CLKDIV = (CLK->CLKDIV & (~CLK_CLKDIV_HCLK_N_Msk)) | u32ClkDiv;
000022  69a0              LDR      r0,[r4,#0x18]
000024  0900              LSRS     r0,r0,#4
000026  0100              LSLS     r0,r0,#4
000028  4338              ORRS     r0,r0,r7
00002a  61a0              STR      r0,[r4,#0x18]
;;;234    
;;;235        /* Switch HCLK to new HCLK source */
;;;236        CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLK_S_Msk)) | u32ClkSrc;    
00002c  6920              LDR      r0,[r4,#0x10]
00002e  08c1              LSRS     r1,r0,#3
000030  9801              LDR      r0,[sp,#4]
000032  00c9              LSLS     r1,r1,#3
000034  4301              ORRS     r1,r1,r0
000036  6121              STR      r1,[r4,#0x10]
;;;237            
;;;238        /* Update System Core Clock */
;;;239        SystemCoreClockUpdate();
000038  f7fffffe          BL       SystemCoreClockUpdate
;;;240        
;;;241        /* Disable HIRC if HIRC is disabled before switching HCLK source */
;;;242        if( u32HIRCSTB == 0 )
00003c  2d00              CMP      r5,#0
00003e  d102              BNE      |L18.70|
;;;243            CLK->PWRCON &= ~CLK_CLKSTATUS_OSC22M_STB_Msk;              
000040  6820              LDR      r0,[r4,#0]
000042  43b0              BICS     r0,r0,r6
000044  6020              STR      r0,[r4,#0]
                  |L18.70|
;;;244    }
000046  bdfe              POP      {r1-r7,pc}
;;;245    
                          ENDP

                  |L18.72|
                          DCD      0x50000200

                          AREA ||i.CLK_SetModuleClock||, CODE, READONLY, ALIGN=2

                  CLK_SetModuleClock PROC
;;;314      */
;;;315    void CLK_SetModuleClock(uint32_t u32ModuleIdx, uint32_t u32ClkSrc, uint32_t u32ClkDiv)
000000  b570              PUSH     {r4-r6,lr}
;;;316    {
;;;317        uint32_t u32tmp = 0, u32sel = 0, u32div = 0;
;;;318    
;;;319        if(MODULE_CLKSEL_Msk(u32ModuleIdx) != MODULE_NoMsk)
000002  0e43              LSRS     r3,r0,#25
000004  075b              LSLS     r3,r3,#29
000006  d00d              BEQ      |L19.36|
;;;320        {
;;;321            u32sel = (uint32_t)&CLK->CLKSEL0 + ((MODULE_CLKSEL(u32ModuleIdx)) * 4);
000008  0083              LSLS     r3,r0,#2
00000a  0f9b              LSRS     r3,r3,#30
00000c  4c0f              LDR      r4,|L19.76|
00000e  009b              LSLS     r3,r3,#2
000010  191b              ADDS     r3,r3,r4
;;;322            u32tmp = *(volatile uint32_t *)(u32sel);
000012  681c              LDR      r4,[r3,#0]
;;;323            u32tmp = (u32tmp & (~(MODULE_CLKSEL_Msk(u32ModuleIdx) << MODULE_CLKSEL_Pos(u32ModuleIdx)))) | u32ClkSrc;
000014  0105              LSLS     r5,r0,#4
000016  0f6d              LSRS     r5,r5,#29
000018  01c6              LSLS     r6,r0,#7
00001a  0ef6              LSRS     r6,r6,#27
00001c  40b5              LSLS     r5,r5,r6
00001e  43ac              BICS     r4,r4,r5
000020  430c              ORRS     r4,r4,r1
;;;324            *(volatile uint32_t *)(u32sel) = u32tmp;
000022  601c              STR      r4,[r3,#0]
                  |L19.36|
;;;325        }
;;;326    
;;;327        if(MODULE_CLKDIV_Msk(u32ModuleIdx) != MODULE_NoMsk)
000024  0a83              LSRS     r3,r0,#10
000026  0619              LSLS     r1,r3,#24
000028  0e09              LSRS     r1,r1,#24
00002a  d00e              BEQ      |L19.74|
;;;328        {
;;;329            u32div = (uint32_t)&CLK->CLKDIV + ((MODULE_CLKDIV(u32ModuleIdx)) * 4);
00002c  0301              LSLS     r1,r0,#12
00002e  4c07              LDR      r4,|L19.76|
000030  0f89              LSRS     r1,r1,#30
000032  0089              LSLS     r1,r1,#2
000034  3408              ADDS     r4,r4,#8
000036  1909              ADDS     r1,r1,r4
;;;330            u32tmp = *(volatile uint32_t *)(u32div);
000038  680c              LDR      r4,[r1,#0]
;;;331            u32tmp = ((u32tmp & (~MODULE_CLKDIV_Msk(u32ModuleIdx) << MODULE_CLKDIV_Pos(u32ModuleIdx)))) | u32ClkDiv;
00003a  b2db              UXTB     r3,r3
00003c  0580              LSLS     r0,r0,#22
00003e  43db              MVNS     r3,r3
000040  0ec0              LSRS     r0,r0,#27
000042  4083              LSLS     r3,r3,r0
000044  4023              ANDS     r3,r3,r4
000046  4313              ORRS     r3,r3,r2
;;;332            *(volatile uint32_t *)(u32div) = u32tmp;
000048  600b              STR      r3,[r1,#0]
                  |L19.74|
;;;333        }
;;;334    }
00004a  bd70              POP      {r4-r6,pc}
;;;335    
                          ENDP

                  |L19.76|
                          DCD      0x50000210

                          AREA ||i.CLK_SetSysTickClockSrc||, CODE, READONLY, ALIGN=2

                  CLK_SetSysTickClockSrc PROC
;;;346      */
;;;347    void CLK_SetSysTickClockSrc(uint32_t u32ClkSrc)
000000  4a03              LDR      r2,|L20.16|
;;;348    {
;;;349        CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_STCLK_S_Msk) | u32ClkSrc;
000002  6911              LDR      r1,[r2,#0x10]
000004  2338              MOVS     r3,#0x38
000006  4399              BICS     r1,r1,r3
000008  4301              ORRS     r1,r1,r0
00000a  6111              STR      r1,[r2,#0x10]
;;;350    }
00000c  4770              BX       lr
;;;351    
                          ENDP

00000e  0000              DCW      0x0000
                  |L20.16|
                          DCD      0x50000200

                          AREA ||i.CLK_WaitClockReady||, CODE, READONLY, ALIGN=2

                  CLK_WaitClockReady PROC
;;;599      */
;;;600    uint32_t CLK_WaitClockReady(uint32_t u32ClkMask)
000000  b510              PUSH     {r4,lr}
;;;601    {
000002  4604              MOV      r4,r0
;;;602        int32_t i32TimeOutCnt = 1200000;   
000004  4907              LDR      r1,|L21.36|
;;;603    
;;;604        while((CLK->CLKSTATUS & u32ClkMask) != u32ClkMask)
000006  4b08              LDR      r3,|L21.40|
000008  e005              B        |L21.22|
                  |L21.10|
;;;605        {
;;;606            if(i32TimeOutCnt-- <= 0)
00000a  460a              MOV      r2,r1
00000c  1e49              SUBS     r1,r1,#1
00000e  2a00              CMP      r2,#0
000010  dc01              BGT      |L21.22|
;;;607                return 0;
000012  2000              MOVS     r0,#0
;;;608        }
;;;609    
;;;610        return 1;
;;;611    }
000014  bd10              POP      {r4,pc}
                  |L21.22|
000016  68da              LDR      r2,[r3,#0xc]          ;604
000018  4620              MOV      r0,r4                 ;604
00001a  4390              BICS     r0,r0,r2              ;604
00001c  d1f5              BNE      |L21.10|
00001e  2001              MOVS     r0,#1                 ;610
000020  bd10              POP      {r4,pc}
;;;612    
                          ENDP

000022  0000              DCW      0x0000
                  |L21.36|
                          DCD      0x00124f80
                  |L21.40|
                          DCD      0x50000200

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Nuvoton\\NuMicro_DFP\\1.0.9\\Device\\M051\\Driver\\clk.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_clk_c_9b5832dc____REV16|
#line 441 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_clk_c_9b5832dc____REV16| PROC
#line 442

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_clk_c_9b5832dc____REVSH|
#line 456
|__asm___5_clk_c_9b5832dc____REVSH| PROC
#line 457

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
