; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M051Series\Include -I..\..\..\Library\StdDriver\inc -IH:\Nuvoton\USART\KEIL\RTE\_Template -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.0.9\Device\M051\Driver -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.0.9\Device\M051\Include -D__MICROLIB -D__UVISION_VERSION=522 -D_RTE_ --omf_browse=.\obj\uart.crf C:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.0.9\Device\M051\Driver\uart.c]
                          THUMB

                          AREA ||i.CLK_GetPLLClockFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetPLLClockFreq PROC
;;;199      */
;;;200    __STATIC_INLINE uint32_t CLK_GetPLLClockFreq(void)
000000  b508              PUSH     {r3,lr}
;;;201    {
;;;202        uint32_t u32PllFreq = 0, u32PllReg;
;;;203        uint32_t u32FIN, u32NF, u32NR, u32NO;
;;;204        uint8_t au8NoTbl[4] = {1, 2, 2, 4};
000002  a011              ADR      r0,|L1.72|
000004  6800              LDR      r0,[r0,#0]
;;;205    
;;;206        u32PllReg = CLK->PLLCON;
000006  9000              STR      r0,[sp,#0]
000008  4810              LDR      r0,|L1.76|
00000a  6a01              LDR      r1,[r0,#0x20]
;;;207    
;;;208        if(u32PllReg & (CLK_PLLCON_PD_Msk | CLK_PLLCON_OE_Msk))
00000c  1300              ASRS     r0,r0,#12
00000e  4201              TST      r1,r0
000010  d001              BEQ      |L1.22|
;;;209            return 0;           /* PLL is in power down mode or fix low */
000012  2000              MOVS     r0,#0
                  |L1.20|
;;;210    
;;;211        if(u32PllReg & CLK_PLLCON_PLL_SRC_HIRC)
;;;212            u32FIN = __HIRC;    /* PLL source clock from HIRC */
;;;213        else
;;;214            u32FIN = __HXT;     /* PLL source clock from HXT */
;;;215    
;;;216        if(u32PllReg & CLK_PLLCON_BP_Msk)
;;;217            return u32FIN;      /* PLL is in bypass mode */
;;;218    
;;;219        /* PLL is output enabled in normal work mode */
;;;220        u32NO = au8NoTbl[((u32PllReg & CLK_PLLCON_OUT_DV_Msk) >> CLK_PLLCON_OUT_DV_Pos)];
;;;221        u32NF = ((u32PllReg & CLK_PLLCON_FB_DV_Msk) >> CLK_PLLCON_FB_DV_Pos) + 2;
;;;222        u32NR = ((u32PllReg & CLK_PLLCON_IN_DV_Msk) >> CLK_PLLCON_IN_DV_Pos) + 2;
;;;223    
;;;224        /* u32FIN is shifted 2 bits to avoid overflow */
;;;225        u32PllFreq = (((u32FIN >> 2) * u32NF) / (u32NR * u32NO) << 2);
;;;226    
;;;227        return u32PllFreq;
;;;228    }
000014  bd08              POP      {r3,pc}
                  |L1.22|
000016  0308              LSLS     r0,r1,#12             ;211
000018  d501              BPL      |L1.30|
00001a  480d              LDR      r0,|L1.80|
00001c  e000              B        |L1.32|
                  |L1.30|
00001e  480d              LDR      r0,|L1.84|
                  |L1.32|
000020  038a              LSLS     r2,r1,#14             ;216
000022  d4f7              BMI      |L1.20|
000024  040a              LSLS     r2,r1,#16             ;220
000026  0f92              LSRS     r2,r2,#30             ;220
000028  466b              MOV      r3,sp                 ;220
00002a  5c9b              LDRB     r3,[r3,r2]            ;220
00002c  05ca              LSLS     r2,r1,#23             ;221
00002e  0489              LSLS     r1,r1,#18             ;222
000030  0dd2              LSRS     r2,r2,#23             ;221
000032  0ec9              LSRS     r1,r1,#27             ;222
000034  1c89              ADDS     r1,r1,#2              ;222
000036  0880              LSRS     r0,r0,#2              ;225
000038  1c92              ADDS     r2,r2,#2              ;225
00003a  4359              MULS     r1,r3,r1              ;225
00003c  4350              MULS     r0,r2,r0              ;225
00003e  f7fffffe          BL       __aeabi_uidivmod
000042  0080              LSLS     r0,r0,#2              ;225
000044  bd08              POP      {r3,pc}
;;;229    
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
000048  01020204          DCB      1,2,2,4
                  |L1.76|
                          DCD      0x50000200
                  |L1.80|
                          DCD      0x01518000
                  |L1.84|
                          DCD      0x00b71b00

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;615     */
;;;616    __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;617    {
000002  db05              BLT      |L2.16|
;;;618      if ((int32_t)(IRQn) >= 0)
;;;619      {
;;;620        NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
000004  06c1              LSLS     r1,r0,#27
000006  0ec9              LSRS     r1,r1,#27
000008  2001              MOVS     r0,#1
00000a  4088              LSLS     r0,r0,r1
00000c  4901              LDR      r1,|L2.20|
00000e  6008              STR      r0,[r1,#0]
                  |L2.16|
;;;621      }
;;;622    }
000010  4770              BX       lr
;;;623    
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      0xe000e180

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;579     */
;;;580    __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;581    {
000002  db05              BLT      |L3.16|
;;;582      if ((int32_t)(IRQn) >= 0)
;;;583      {
;;;584        NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
000004  06c1              LSLS     r1,r0,#27
000006  0ec9              LSRS     r1,r1,#27
000008  2001              MOVS     r0,#1
00000a  4088              LSLS     r0,r0,r1
00000c  4901              LDR      r1,|L3.20|
00000e  6008              STR      r0,[r1,#0]
                  |L3.16|
;;;585      }
;;;586    }
000010  4770              BX       lr
;;;587    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0xe000e100

                          AREA ||i.UART_ClearIntFlag||, CODE, READONLY, ALIGN=2

                  UART_ClearIntFlag PROC
;;;41      */
;;;42     void UART_ClearIntFlag(UART_T* uart , uint32_t u32InterruptFlag)
000000  054a              LSLS     r2,r1,#21
;;;43     {
000002  d503              BPL      |L4.12|
;;;44     
;;;45         if(u32InterruptFlag & UART_ISR_RLS_INT_Msk) /* clear Receive Line Status Interrupt */
;;;46         {
;;;47             uart->FSR = UART_FSR_BIF_Msk | UART_FSR_FEF_Msk | UART_FSR_FEF_Msk;
000004  2260              MOVS     r2,#0x60
000006  6182              STR      r2,[r0,#0x18]
;;;48             uart->FSR = UART_FSR_RS485_ADD_DETF_Msk;
000008  2208              MOVS     r2,#8
00000a  6182              STR      r2,[r0,#0x18]
                  |L4.12|
;;;49         }
;;;50     
;;;51         if(u32InterruptFlag & UART_ISR_MODEM_INT_Msk)  /* clear Modem Interrupt */
00000c  050a              LSLS     r2,r1,#20
00000e  d503              BPL      |L4.24|
;;;52             uart->MSR |= UART_MSR_DCTSF_Msk;
000010  6942              LDR      r2,[r0,#0x14]
000012  2301              MOVS     r3,#1
000014  431a              ORRS     r2,r2,r3
000016  6142              STR      r2,[r0,#0x14]
                  |L4.24|
;;;53     
;;;54         if(u32InterruptFlag & UART_ISR_BUF_ERR_INT_Msk)  /* clear Buffer Error Interrupt */
000018  048a              LSLS     r2,r1,#18
00001a  d501              BPL      |L4.32|
;;;55         {
;;;56             uart->FSR = UART_FSR_RX_OVER_IF_Msk | UART_FSR_TX_OVER_IF_Msk;
00001c  4a03              LDR      r2,|L4.44|
00001e  6182              STR      r2,[r0,#0x18]
                  |L4.32|
;;;57         }
;;;58     
;;;59         if(u32InterruptFlag & UART_ISR_LIN_RX_BREAK_INT_Msk) /* clear LIN break Interrupt */
000020  0409              LSLS     r1,r1,#16
000022  d501              BPL      |L4.40|
;;;60             uart->ISR = UART_ISR_LIN_RX_BREAK_IF_Msk;
000024  2180              MOVS     r1,#0x80
000026  61c1              STR      r1,[r0,#0x1c]
                  |L4.40|
;;;61     
;;;62     }
000028  4770              BX       lr
;;;63     
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      0x01000001

                          AREA ||i.UART_Close||, CODE, READONLY, ALIGN=1

                  UART_Close PROC
;;;73      */
;;;74     void UART_Close(UART_T* uart)
000000  2100              MOVS     r1,#0
;;;75     {
;;;76         uart->IER = 0;
000002  6041              STR      r1,[r0,#4]
;;;77     }
000004  4770              BX       lr
;;;78     
                          ENDP


                          AREA ||i.UART_DisableFlowCtrl||, CODE, READONLY, ALIGN=1

                  UART_DisableFlowCtrl PROC
;;;88      */
;;;89     void UART_DisableFlowCtrl(UART_T* uart)
000000  6841              LDR      r1,[r0,#4]
;;;90     {
;;;91         uart->IER &= ~(UART_IER_AUTO_RTS_EN_Msk | UART_IER_AUTO_CTS_EN_Msk);
000002  2203              MOVS     r2,#3
000004  0312              LSLS     r2,r2,#12
000006  4391              BICS     r1,r1,r2
000008  6041              STR      r1,[r0,#4]
;;;92     }
00000a  4770              BX       lr
;;;93     
                          ENDP


                          AREA ||i.UART_DisableInt||, CODE, READONLY, ALIGN=2

                  UART_DisableInt PROC
;;;112     */
;;;113    void UART_DisableInt(UART_T*  uart, uint32_t u32InterruptFlag)
000000  b510              PUSH     {r4,lr}
;;;114    {
;;;115        /* Disable UART specified interrupt */
;;;116        UART_DISABLE_INT(uart, u32InterruptFlag);
000002  6842              LDR      r2,[r0,#4]
000004  438a              BICS     r2,r2,r1
000006  6042              STR      r2,[r0,#4]
;;;117    
;;;118        /* Disable NVIC UART IRQ */
;;;119        if(uart == UART0)
000008  4904              LDR      r1,|L7.28|
00000a  4288              CMP      r0,r1
00000c  d101              BNE      |L7.18|
;;;120            NVIC_DisableIRQ(UART0_IRQn);
00000e  200c              MOVS     r0,#0xc
000010  e000              B        |L7.20|
                  |L7.18|
;;;121        else
;;;122            NVIC_DisableIRQ(UART1_IRQn);
000012  200d              MOVS     r0,#0xd
                  |L7.20|
000014  f7fffffe          BL       NVIC_DisableIRQ
;;;123    }
000018  bd10              POP      {r4,pc}
;;;124    
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      0x40050000

                          AREA ||i.UART_EnableFlowCtrl||, CODE, READONLY, ALIGN=1

                  UART_EnableFlowCtrl PROC
;;;134     */
;;;135    void UART_EnableFlowCtrl(UART_T* uart)
000000  6901              LDR      r1,[r0,#0x10]
;;;136    {
;;;137        /* Set RTS pin output is low level active */
;;;138        uart->MCR |= UART_MCR_LEV_RTS_Msk;
000002  2201              MOVS     r2,#1
000004  0252              LSLS     r2,r2,#9
000006  4311              ORRS     r1,r1,r2
000008  6101              STR      r1,[r0,#0x10]
;;;139    
;;;140        /* Set CTS pin input is low level active */
;;;141        uart->MSR |= UART_MSR_LEV_CTS_Msk;
00000a  6941              LDR      r1,[r0,#0x14]
00000c  1052              ASRS     r2,r2,#1
00000e  4311              ORRS     r1,r1,r2
000010  6141              STR      r1,[r0,#0x14]
;;;142    
;;;143        /* Set RTS and CTS auto flow control enable */
;;;144        uart->IER |= UART_IER_AUTO_RTS_EN_Msk | UART_IER_AUTO_CTS_EN_Msk;
000012  6841              LDR      r1,[r0,#4]
000014  2203              MOVS     r2,#3
000016  0312              LSLS     r2,r2,#12
000018  4311              ORRS     r1,r1,r2
00001a  6041              STR      r1,[r0,#4]
;;;145    }
00001c  4770              BX       lr
;;;146    
                          ENDP


                          AREA ||i.UART_EnableInt||, CODE, READONLY, ALIGN=2

                  UART_EnableInt PROC
;;;166     */
;;;167    void UART_EnableInt(UART_T*  uart, uint32_t u32InterruptFlag)
000000  b510              PUSH     {r4,lr}
;;;168    {
;;;169    
;;;170        /* Enable UART specified interrupt */
;;;171        UART_ENABLE_INT(uart, u32InterruptFlag);
000002  6842              LDR      r2,[r0,#4]
000004  430a              ORRS     r2,r2,r1
000006  6042              STR      r2,[r0,#4]
;;;172    
;;;173        /* Enable NVIC UART IRQ */
;;;174        if(uart == UART0)
000008  4904              LDR      r1,|L9.28|
00000a  4288              CMP      r0,r1
00000c  d101              BNE      |L9.18|
;;;175            NVIC_EnableIRQ(UART0_IRQn);
00000e  200c              MOVS     r0,#0xc
000010  e000              B        |L9.20|
                  |L9.18|
;;;176        else
;;;177            NVIC_EnableIRQ(UART1_IRQn);
000012  200d              MOVS     r0,#0xd
                  |L9.20|
000014  f7fffffe          BL       NVIC_EnableIRQ
;;;178    
;;;179    }
000018  bd10              POP      {r4,pc}
;;;180    
                          ENDP

00001a  0000              DCW      0x0000
                  |L9.28|
                          DCD      0x40050000

                          AREA ||i.UART_Open||, CODE, READONLY, ALIGN=2

                  UART_Open PROC
;;;191     */
;;;192    void UART_Open(UART_T* uart, uint32_t u32baudrate)
000000  b5f0              PUSH     {r4-r7,lr}
;;;193    {
000002  4604              MOV      r4,r0
;;;194        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;195        uint32_t u32ClkTbl[4] = {__HXT, 0, 0, __HIRC};
000004  481c              LDR      r0,|L10.120|
000006  460d              MOV      r5,r1                 ;193
000008  c80f              LDM      r0,{r0-r3}
00000a  b085              SUB      sp,sp,#0x14           ;193
00000c  466e              MOV      r6,sp
00000e  c60f              STM      r6!,{r0-r3}
;;;196        uint32_t u32Baud_Div = 0;
;;;197    
;;;198        /* Get UART clock source selection */
;;;199        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART_S_Msk) >> CLK_CLKSEL1_UART_S_Pos;
000010  481a              LDR      r0,|L10.124|
000012  6941              LDR      r1,[r0,#0x14]
;;;200    
;;;201        /* Get UART clock divider number */
;;;202        u8UartClkDivNum = (CLK->CLKDIV & CLK_CLKDIV_UART_N_Msk) >> CLK_CLKDIV_UART_N_Pos;
000014  6980              LDR      r0,[r0,#0x18]
;;;203    
;;;204        /* Select UART function */
;;;205        uart->FUN_SEL = UART_FUNC_SEL_UART;
;;;206    
;;;207        /* Set UART line configuration */
;;;208        uart->LCR = UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1;
;;;209    
;;;210        /* Set UART Rx and RTS trigger level */
;;;211        uart->FCR &= ~(UART_FCR_RFITL_Msk | UART_FCR_RTS_TRI_LEV_Msk);
;;;212    
;;;213        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;214        if(u8UartClkSrcSel == 1)
;;;215            u32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;216    
;;;217        /* Set UART baud rate */
;;;218        if(u32baudrate != 0)
;;;219        {
;;;220            u32Baud_Div = UART_BAUD_MODE2_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate);
;;;221    
;;;222            if(u32Baud_Div > 0xFFFF)
;;;223                uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate));
;;;224            else
;;;225                uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;226        }
;;;227    }
000016  018a              LSLS     r2,r1,#6
000018  2103              MOVS     r1,#3
00001a  0f96              LSRS     r6,r2,#30
00001c  0500              LSLS     r0,r0,#20
00001e  0f07              LSRS     r7,r0,#28
000020  2000              MOVS     r0,#0                 ;205
000022  6320              STR      r0,[r4,#0x30]         ;205
000024  60e1              STR      r1,[r4,#0xc]          ;208
000026  68a0              LDR      r0,[r4,#8]            ;211
000028  4915              LDR      r1,|L10.128|
00002a  4008              ANDS     r0,r0,r1              ;211
00002c  60a0              STR      r0,[r4,#8]            ;211
00002e  2e01              CMP      r6,#1                 ;214
000030  d102              BNE      |L10.56|
000032  f7fffffe          BL       CLK_GetPLLClockFreq
000036  9001              STR      r0,[sp,#4]            ;215
                  |L10.56|
000038  2d00              CMP      r5,#0                 ;218
00003a  d01b              BEQ      |L10.116|
00003c  00b1              LSLS     r1,r6,#2              ;220
00003e  4668              MOV      r0,sp                 ;220
000040  5840              LDR      r0,[r0,r1]            ;220
000042  1c79              ADDS     r1,r7,#1              ;220
000044  f7fffffe          BL       __aeabi_uidivmod
000048  4606              MOV      r6,r0                 ;220
00004a  0869              LSRS     r1,r5,#1              ;220
00004c  1840              ADDS     r0,r0,r1              ;220
00004e  4629              MOV      r1,r5                 ;220
000050  f7fffffe          BL       __aeabi_uidivmod
000054  490b              LDR      r1,|L10.132|
000056  1e80              SUBS     r0,r0,#2              ;222
000058  4288              CMP      r0,r1                 ;222
00005a  d907              BLS      |L10.108|
00005c  00e9              LSLS     r1,r5,#3              ;223
00005e  1870              ADDS     r0,r6,r1              ;223
000060  4629              MOV      r1,r5                 ;223
000062  f7fffffe          BL       __aeabi_uidivmod
000066  0900              LSRS     r0,r0,#4              ;223
000068  1e80              SUBS     r0,r0,#2              ;223
00006a  e002              B        |L10.114|
                  |L10.108|
00006c  2103              MOVS     r1,#3                 ;225
00006e  0709              LSLS     r1,r1,#28             ;225
000070  4308              ORRS     r0,r0,r1              ;225
                  |L10.114|
000072  6260              STR      r0,[r4,#0x24]         ;225
                  |L10.116|
000074  b005              ADD      sp,sp,#0x14
000076  bdf0              POP      {r4-r7,pc}
;;;228    
                          ENDP

                  |L10.120|
                          DCD      ||.constdata||
                  |L10.124|
                          DCD      0x50000200
                  |L10.128|
                          DCD      0xfff0ff0f
                  |L10.132|
                          DCD      0x0000ffff

                          AREA ||i.UART_Read||, CODE, READONLY, ALIGN=1

                  UART_Read PROC
;;;240     */
;;;241    uint32_t UART_Read(UART_T* uart, uint8_t *pu8RxBuf, uint32_t u32ReadBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;242    {
000002  4604              MOV      r4,r0
;;;243        uint32_t  u32Count, u32delayno;
;;;244    
;;;245        for(u32Count = 0; u32Count < u32ReadBytes; u32Count++)
000004  2000              MOVS     r0,#0
;;;246        {
;;;247            u32delayno = 0;
;;;248    
;;;249            while(uart->FSR & UART_FSR_RX_EMPTY_Msk) /* Check RX empty => failed */
;;;250            {
;;;251                u32delayno++;
;;;252                if(u32delayno >= 0x40000000)
000006  2501              MOVS     r5,#1
000008  07ad              LSLS     r5,r5,#30
00000a  e00c              B        |L11.38|
                  |L11.12|
00000c  2300              MOVS     r3,#0                 ;247
00000e  e004              B        |L11.26|
                  |L11.16|
000010  1c5b              ADDS     r3,r3,#1              ;249
000012  42ab              CMP      r3,r5
000014  d301              BCC      |L11.26|
;;;253                    return FALSE;
000016  2000              MOVS     r0,#0
;;;254            }
;;;255            pu8RxBuf[u32Count] = uart->RBR;    /* Get Data from UART RX  */
;;;256        }
;;;257    
;;;258        return u32Count;
;;;259    
;;;260    }
000018  bd70              POP      {r4-r6,pc}
                  |L11.26|
00001a  69a6              LDR      r6,[r4,#0x18]         ;249
00001c  0476              LSLS     r6,r6,#17             ;249
00001e  d4f7              BMI      |L11.16|
000020  6823              LDR      r3,[r4,#0]            ;255
000022  540b              STRB     r3,[r1,r0]            ;255
000024  1c40              ADDS     r0,r0,#1              ;255
                  |L11.38|
000026  4290              CMP      r0,r2                 ;245
000028  d3f0              BCC      |L11.12|
00002a  bd70              POP      {r4-r6,pc}
;;;261    
                          ENDP


                          AREA ||i.UART_SelectIrDAMode||, CODE, READONLY, ALIGN=2

                  UART_SelectIrDAMode PROC
;;;353     */
;;;354    void UART_SelectIrDAMode(UART_T* uart, uint32_t u32Buadrate, uint32_t u32Direction)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;355    {
000002  4604              MOV      r4,r0
;;;356        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;357        uint32_t u32ClkTbl[4] = {__HXT, 0, 0, __HIRC};
000004  481c              LDR      r0,|L12.120|
000006  b084              SUB      sp,sp,#0x10           ;355
000008  c80f              LDM      r0,{r0-r3}
;;;358        uint32_t u32Baud_Div;
;;;359    
;;;360        /* Select IrDA function mode */
;;;361        uart->FUN_SEL = UART_FUNC_SEL_IrDA;
00000a  466d              MOV      r5,sp
00000c  c50f              STM      r5!,{r0-r3}
00000e  2602              MOVS     r6,#2
000010  6326              STR      r6,[r4,#0x30]
;;;362    
;;;363        /* Get UART clock source selection */
;;;364        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART_S_Msk) >> CLK_CLKSEL1_UART_S_Pos;
000012  481a              LDR      r0,|L12.124|
000014  6941              LDR      r1,[r0,#0x14]
;;;365    
;;;366        /* Get UART clock divider number */
;;;367        u8UartClkDivNum = (CLK->CLKDIV & CLK_CLKDIV_UART_N_Msk) >> CLK_CLKDIV_UART_N_Pos;
000016  6980              LDR      r0,[r0,#0x18]
;;;368    
;;;369        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;370        if(u8UartClkSrcSel == 1)
;;;371            u32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;372    
;;;373        /* Set UART IrDA baud rate in mode 0 */
;;;374        if(u32Buadrate != 0)
;;;375        {
;;;376            u32Baud_Div = UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32Buadrate);
;;;377    
;;;378            if(u32Baud_Div < 0xFFFF)
;;;379                uart->BAUD = (UART_BAUD_MODE0 | u32Baud_Div);
;;;380        }
;;;381    
;;;382        /* Configure IrDA relative settings */
;;;383        if(u32Direction == UART_IRCR_RX_SELECT)
;;;384        {
;;;385            uart->IRCR |= UART_IRCR_INV_RX_Msk;     //Rx signal is inverted
;;;386            uart->IRCR &= ~UART_IRCR_TX_SELECT_Msk;
;;;387        }
;;;388        else
;;;389        {
;;;390            uart->IRCR &= ~UART_IRCR_INV_TX_Msk;    //Tx signal is not inverted
;;;391            uart->IRCR |= UART_IRCR_TX_SELECT_Msk;        
;;;392        }
;;;393    }
000018  0189              LSLS     r1,r1,#6
00001a  0f8d              LSRS     r5,r1,#30
00001c  0500              LSLS     r0,r0,#20
00001e  0f07              LSRS     r7,r0,#28
000020  2d01              CMP      r5,#1                 ;370
000022  d102              BNE      |L12.42|
000024  f7fffffe          BL       CLK_GetPLLClockFreq
000028  9001              STR      r0,[sp,#4]            ;371
                  |L12.42|
00002a  9805              LDR      r0,[sp,#0x14]         ;374
00002c  2800              CMP      r0,#0                 ;374
00002e  d011              BEQ      |L12.84|
000030  00a9              LSLS     r1,r5,#2              ;376
000032  4668              MOV      r0,sp                 ;376
000034  5840              LDR      r0,[r0,r1]            ;376
000036  1c79              ADDS     r1,r7,#1              ;376
000038  f7fffffe          BL       __aeabi_uidivmod
00003c  9905              LDR      r1,[sp,#0x14]         ;376
00003e  00c9              LSLS     r1,r1,#3              ;376
000040  1840              ADDS     r0,r0,r1              ;376
000042  9905              LDR      r1,[sp,#0x14]         ;376
000044  f7fffffe          BL       __aeabi_uidivmod
000048  0900              LSRS     r0,r0,#4              ;376
00004a  490d              LDR      r1,|L12.128|
00004c  1e80              SUBS     r0,r0,#2              ;378
00004e  4288              CMP      r0,r1                 ;378
000050  d200              BCS      |L12.84|
000052  6260              STR      r0,[r4,#0x24]         ;379
                  |L12.84|
000054  9806              LDR      r0,[sp,#0x18]         ;383
000056  2800              CMP      r0,#0                 ;383
000058  6aa0              LDR      r0,[r4,#0x28]         ;390
00005a  d007              BEQ      |L12.108|
00005c  2120              MOVS     r1,#0x20              ;390
00005e  4388              BICS     r0,r0,r1              ;390
000060  62a0              STR      r0,[r4,#0x28]         ;390
000062  6aa0              LDR      r0,[r4,#0x28]         ;391
000064  4330              ORRS     r0,r0,r6              ;391
                  |L12.102|
000066  62a0              STR      r0,[r4,#0x28]         ;386
000068  b007              ADD      sp,sp,#0x1c
00006a  bdf0              POP      {r4-r7,pc}
                  |L12.108|
00006c  2140              MOVS     r1,#0x40              ;385
00006e  4308              ORRS     r0,r0,r1              ;385
000070  62a0              STR      r0,[r4,#0x28]         ;385
000072  6aa0              LDR      r0,[r4,#0x28]         ;386
000074  43b0              BICS     r0,r0,r6              ;386
000076  e7f6              B        |L12.102|
;;;394    
                          ENDP

                  |L12.120|
                          DCD      ||.constdata||+0x20
                  |L12.124|
                          DCD      0x50000200
                  |L12.128|
                          DCD      0x0000ffff

                          AREA ||i.UART_SelectLINMode||, CODE, READONLY, ALIGN=1

                  UART_SelectLINMode PROC
;;;433     */
;;;434    void UART_SelectLINMode(UART_T* uart, uint32_t u32Mode, uint32_t u32BreakLength)
000000  b510              PUSH     {r4,lr}
;;;435    {
;;;436        /* Select LIN function mode */
;;;437        uart->FUN_SEL = UART_FUNC_SEL_LIN;
000002  2301              MOVS     r3,#1
000004  6303              STR      r3,[r0,#0x30]
;;;438    
;;;439        /* Select LIN function setting : Tx enable, Rx enable and break field length */
;;;440        uart->ALT_CSR &= ~(UART_ALT_CSR_LIN_TX_EN_Msk | UART_ALT_CSR_LIN_RX_EN_Msk | UART_ALT_CSR_UA_LIN_BKFL_Msk);
000006  6ac3              LDR      r3,[r0,#0x2c]
000008  24cf              MOVS     r4,#0xcf
00000a  43a3              BICS     r3,r3,r4
00000c  62c3              STR      r3,[r0,#0x2c]
;;;441        uart->ALT_CSR |= (u32Mode | (u32BreakLength << UART_ALT_CSR_UA_LIN_BKFL_Pos));
00000e  6ac3              LDR      r3,[r0,#0x2c]
000010  4311              ORRS     r1,r1,r2
000012  430b              ORRS     r3,r3,r1
000014  62c3              STR      r3,[r0,#0x2c]
;;;442    }
000016  bd10              POP      {r4,pc}
;;;443    
                          ENDP


                          AREA ||i.UART_SelectRS485Mode||, CODE, READONLY, ALIGN=2

                  UART_SelectRS485Mode PROC
;;;409     */
;;;410    void UART_SelectRS485Mode(UART_T* uart, uint32_t u32Mode, uint32_t u32Addr)
000000  b510              PUSH     {r4,lr}
;;;411    {
;;;412        /* Select UART RS485 function mode */
;;;413        uart->FUN_SEL = UART_FUNC_SEL_RS485;
000002  2303              MOVS     r3,#3
000004  6303              STR      r3,[r0,#0x30]
;;;414    
;;;415        /* Set RS585 configuration */
;;;416        uart->ALT_CSR &= ~(UART_ALT_CSR_RS485_NMM_Msk | UART_ALT_CSR_RS485_AUD_Msk | UART_ALT_CSR_RS485_AAD_Msk | UART_ALT_CSR_ADDR_MATCH_Msk);
000006  6ac3              LDR      r3,[r0,#0x2c]
000008  4c04              LDR      r4,|L14.28|
00000a  4023              ANDS     r3,r3,r4
00000c  62c3              STR      r3,[r0,#0x2c]
;;;417        uart->ALT_CSR |= (u32Mode | (u32Addr << UART_ALT_CSR_ADDR_MATCH_Pos));
00000e  6ac3              LDR      r3,[r0,#0x2c]
000010  0612              LSLS     r2,r2,#24
000012  430a              ORRS     r2,r2,r1
000014  4313              ORRS     r3,r3,r2
000016  62c3              STR      r3,[r0,#0x2c]
;;;418    }
000018  bd10              POP      {r4,pc}
;;;419    
                          ENDP

00001a  0000              DCW      0x0000
                  |L14.28|
                          DCD      0x00fff8ff

                          AREA ||i.UART_SetLine_Config||, CODE, READONLY, ALIGN=2

                  UART_SetLine_Config PROC
;;;288     */
;;;289    void UART_SetLine_Config(UART_T* uart, uint32_t u32baudrate, uint32_t u32data_width, uint32_t u32parity, uint32_t  u32stop_bits)
000000  b5ff              PUSH     {r0-r7,lr}
;;;290    {
000002  4605              MOV      r5,r0
;;;291        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;292        uint32_t u32ClkTbl[4] = {__HXT, 0, 0, __HIRC};
000004  481b              LDR      r0,|L15.116|
000006  460c              MOV      r4,r1                 ;290
000008  c80f              LDM      r0,{r0-r3}
00000a  b085              SUB      sp,sp,#0x14           ;290
00000c  466e              MOV      r6,sp
00000e  c60f              STM      r6!,{r0-r3}
;;;293        uint32_t u32Baud_Div = 0;
;;;294    
;;;295        /* Get UART clock source selection */
;;;296        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART_S_Msk) >> CLK_CLKSEL1_UART_S_Pos;
000010  4819              LDR      r0,|L15.120|
000012  6941              LDR      r1,[r0,#0x14]
;;;297    
;;;298        /* Get UART clock divider number */
;;;299        u8UartClkDivNum = (CLK->CLKDIV & CLK_CLKDIV_UART_N_Msk) >> CLK_CLKDIV_UART_N_Pos;
000014  6980              LDR      r0,[r0,#0x18]
;;;300    
;;;301        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;302        if(u8UartClkSrcSel == 1)
;;;303            u32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;304    
;;;305        /* Set UART baud rate */
;;;306        if(u32baudrate != 0)
;;;307        {
;;;308            u32Baud_Div = UART_BAUD_MODE2_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate);
;;;309    
;;;310            if(u32Baud_Div > 0xFFFF)
;;;311                uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate));
;;;312            else
;;;313                uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;314        }
;;;315    
;;;316        /* Set UART line configuration */
;;;317        uart->LCR = u32data_width | u32parity | u32stop_bits;
;;;318    }
000016  0189              LSLS     r1,r1,#6
000018  0f8e              LSRS     r6,r1,#30
00001a  0500              LSLS     r0,r0,#20
00001c  0f07              LSRS     r7,r0,#28
00001e  2e01              CMP      r6,#1                 ;302
000020  d102              BNE      |L15.40|
000022  f7fffffe          BL       CLK_GetPLLClockFreq
000026  9001              STR      r0,[sp,#4]            ;303
                  |L15.40|
000028  2c00              CMP      r4,#0                 ;306
00002a  d01b              BEQ      |L15.100|
00002c  00b1              LSLS     r1,r6,#2              ;308
00002e  4668              MOV      r0,sp                 ;308
000030  5840              LDR      r0,[r0,r1]            ;308
000032  1c79              ADDS     r1,r7,#1              ;308
000034  f7fffffe          BL       __aeabi_uidivmod
000038  4606              MOV      r6,r0                 ;308
00003a  0861              LSRS     r1,r4,#1              ;308
00003c  1840              ADDS     r0,r0,r1              ;308
00003e  4621              MOV      r1,r4                 ;308
000040  f7fffffe          BL       __aeabi_uidivmod
000044  490d              LDR      r1,|L15.124|
000046  1e80              SUBS     r0,r0,#2              ;310
000048  4288              CMP      r0,r1                 ;310
00004a  d907              BLS      |L15.92|
00004c  00e1              LSLS     r1,r4,#3              ;311
00004e  1870              ADDS     r0,r6,r1              ;311
000050  4621              MOV      r1,r4                 ;311
000052  f7fffffe          BL       __aeabi_uidivmod
000056  0900              LSRS     r0,r0,#4              ;311
000058  1e80              SUBS     r0,r0,#2              ;311
00005a  e002              B        |L15.98|
                  |L15.92|
00005c  2103              MOVS     r1,#3                 ;313
00005e  0709              LSLS     r1,r1,#28             ;313
000060  4308              ORRS     r0,r0,r1              ;313
                  |L15.98|
000062  6268              STR      r0,[r5,#0x24]         ;311
                  |L15.100|
000064  9908              LDR      r1,[sp,#0x20]         ;317
000066  9807              LDR      r0,[sp,#0x1c]         ;317
000068  4308              ORRS     r0,r0,r1              ;317
00006a  990e              LDR      r1,[sp,#0x38]         ;317
00006c  4308              ORRS     r0,r0,r1              ;317
00006e  60e8              STR      r0,[r5,#0xc]          ;317
000070  b009              ADD      sp,sp,#0x24
000072  bdf0              POP      {r4-r7,pc}
;;;319    
                          ENDP

                  |L15.116|
                          DCD      ||.constdata||+0x10
                  |L15.120|
                          DCD      0x50000200
                  |L15.124|
                          DCD      0x0000ffff

                          AREA ||i.UART_SetTimeoutCnt||, CODE, READONLY, ALIGN=1

                  UART_SetTimeoutCnt PROC
;;;330     */
;;;331    void UART_SetTimeoutCnt(UART_T* uart, uint32_t u32TOC)
000000  6a02              LDR      r2,[r0,#0x20]
;;;332    {
;;;333        /* Set time-out interrupt comparator */
;;;334        uart->TOR = (uart->TOR & ~UART_TOR_TOIC_Msk) | (u32TOC);
000002  0a12              LSRS     r2,r2,#8
000004  0212              LSLS     r2,r2,#8
000006  430a              ORRS     r2,r2,r1
000008  6202              STR      r2,[r0,#0x20]
;;;335    
;;;336        /* Set time-out counter enable */
;;;337        uart->IER |= UART_IER_TIME_OUT_EN_Msk;
00000a  6841              LDR      r1,[r0,#4]
00000c  2201              MOVS     r2,#1
00000e  02d2              LSLS     r2,r2,#11
000010  4311              ORRS     r1,r1,r2
000012  6041              STR      r1,[r0,#4]
;;;338    }
000014  4770              BX       lr
;;;339    
                          ENDP


                          AREA ||i.UART_Write||, CODE, READONLY, ALIGN=1

                  UART_Write PROC
;;;455     */
;;;456    uint32_t UART_Write(UART_T* uart, uint8_t *pu8TxBuf, uint32_t u32WriteBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;457    {
000002  4604              MOV      r4,r0
;;;458        uint32_t  u32Count, u32delayno;
;;;459    
;;;460        for(u32Count = 0; u32Count != u32WriteBytes; u32Count++)
000004  2000              MOVS     r0,#0
;;;461        {
;;;462            u32delayno = 0;
;;;463            while((uart->FSR & UART_FSR_TE_FLAG_Msk) == 0)  /* Wait Tx empty and Time-out manner */
;;;464            {
;;;465                u32delayno++;
;;;466                if(u32delayno >= 0x40000000)
000006  2501              MOVS     r5,#1
000008  07ad              LSLS     r5,r5,#30
00000a  e00c              B        |L17.38|
                  |L17.12|
00000c  2300              MOVS     r3,#0                 ;462
00000e  e004              B        |L17.26|
                  |L17.16|
000010  1c5b              ADDS     r3,r3,#1              ;463
000012  42ab              CMP      r3,r5
000014  d301              BCC      |L17.26|
;;;467                    return FALSE;
000016  2000              MOVS     r0,#0
;;;468            }
;;;469            uart->THR = pu8TxBuf[u32Count];    /* Send UART Data from buffer */
;;;470        }
;;;471    
;;;472        return u32Count;
;;;473    
;;;474    }
000018  bd70              POP      {r4-r6,pc}
                  |L17.26|
00001a  69a6              LDR      r6,[r4,#0x18]         ;463
00001c  00f6              LSLS     r6,r6,#3              ;463
00001e  d5f7              BPL      |L17.16|
000020  5c0b              LDRB     r3,[r1,r0]            ;469
000022  6023              STR      r3,[r4,#0]            ;469
000024  1c40              ADDS     r0,r0,#1              ;469
                  |L17.38|
000026  4290              CMP      r0,r2                 ;460
000028  d1f0              BNE      |L17.12|
00002a  bd70              POP      {r4-r6,pc}
;;;475    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x01518000
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x01518000
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x01518000

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Nuvoton\\NuMicro_DFP\\1.0.9\\Device\\M051\\Driver\\uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REV16|
#line 441 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_uart_c_f12f5b44____REV16| PROC
#line 442

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REVSH|
#line 456
|__asm___6_uart_c_f12f5b44____REVSH| PROC
#line 457

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
